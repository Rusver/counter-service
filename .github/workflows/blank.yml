# This is a basic workflow to help you get started with Actions

name: CICD

# Controls when the workflow will run
on:
# Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
  # Triggers the workflow on push or pull request events but only for the "dev" branch
  push:
    branches: [ "dev" ]
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Docker Setup Buildx
        uses: docker/setup-buildx-action@v3.7.1

      - name: Use Environment Variable
        run: echo "The environment name is ${{ vars.DOCKER_HUB_USERNAME }}"
      # Runs a set of commands using the runners shell
      - name: Log in to Docker Hub
        uses: docker/login-action@v3.3.0
        with:
          username: ${{ vars.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}
          
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/counter-service:latest  # Change `my-app` to your image name
  
  deploy:
      runs-on: ubuntu-latest
      needs: build
      if: github.ref == 'refs/heads/main'  # Only run this job on main branch
      steps:
        - name: Checkout code
          uses: actions/checkout@v4
  
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}
  
        - name: Update kubeconfig
          run: |
            aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
  
        - name: Deploy to EKS
          run: |
            kubectl set image deployment/counter-service counter-service=${{ secrets.DOCKER_HUB_USERNAME }}/counter-service:latest  # Update with your app and image names
            kubectl rollout status deployment/counter-service     
          
